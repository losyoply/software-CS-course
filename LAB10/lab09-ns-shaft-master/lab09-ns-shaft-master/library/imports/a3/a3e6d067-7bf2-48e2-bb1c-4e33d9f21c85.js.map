{"version":3,"sources":["assets\\Scripts\\Platform.ts"],"names":[],"mappings":";;;;;AAAM,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAsC,4BAAY;IAAlD;QAAA,qEA0FC;QAxFC,iBAAW,GAAiB,IAAI,CAAC;QAEvB,eAAS,GAAY,KAAK,CAAC;QAE7B,UAAI,GAAiB,IAAI,CAAC;QAE1B,eAAS,GAAsB,IAAI,CAAC;QAEpC,gBAAU,GAAW,GAAG,CAAC;QAEzB,eAAS,GAAW,GAAG,CAAC;QAExB,oBAAc,GAAW,GAAG,CAAC;;QAqCrC,mDAAmD;QACnD,wDAAwD;QACxD,mEAAmE;QACnE,yDAAyD;QACzD,EAAE;QACF,6FAA6F;QAC7F,EAAE;QACF,uGAAuG;QACvG,0EAA0E;QAC1E,yEAAyE;QACzE,8FAA8F;QAC9F,EAAE;QACF,kFAAkF;QAClF,sFAAsF;QACtF,qHAAqH;QACrH,uDAAuD;QACvD,EAAE;QACF,qFAAqF;QACrF,EAAE;QACF,gFAAgF;QAChF,yCAAyC;QACzC,EAAE;QACF,yFAAyF;QACzF,EAAE;QACF,gFAAgF;QAChF,oCAAoC;QACpC,EAAE;QACF,6FAA6F;QAC7F,EAAE;QACF,mHAAmH;QACnH,EAAE;QACF,0FAA0F;QAC1F,EAAE;QACF,EAAE;QACF,gIAAgI;QAChI,8FAA8F;QAC9F,EAAE;QACF,gIAAgI;QAChI,mDAAmD;IACrD,CAAC;IA1EC,wBAAK,GAAL;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;QAE5C,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,UAAU,EAAE;YAChC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;SACpC;IACH,CAAC;IAED,wBAAK,GAAL;QACE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IACzB,CAAC;IAED,yBAAM,GAAN,UAAO,EAAE;QACP,IACE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,IAAI,CAAC;YAClC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,GAAG,GAAG;YAEnC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,OAAO,GAAG,KAAK,CAAC;;YACtD,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;IAC/D,CAAC;IAED,2BAAQ,GAAR;QACE,IAAI,IAAI,CAAC,IAAI;YAAE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IACnD,CAAC;IAED,+BAAY,GAAZ;QACE,IAAI,IAAI,CAAC,SAAS;YAAE,OAAO,IAAI,CAAC,SAAS,CAAC;IAC5C,CAAC;IAED,kCAAe,GAAf;QACE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC;IA/CD;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,SAAS,EAAE,CAAC;iDACA;IAFd,QAAQ;QAD5B,OAAO;OACa,QAAQ,CA0F5B;IAAD,eAAC;CA1FD,AA0FC,CA1FqC,EAAE,CAAC,SAAS,GA0FjD;kBA1FoB,QAAQ","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Platform extends cc.Component {\n  @property({ type: cc.AudioClip })\n  soundEffect: cc.AudioClip = null;\n\n  protected isTouched: boolean = false;\n\n  private anim: cc.Animation = null;\n\n  private animState: cc.AnimationState = null;\n\n  private highestPos: number = 118;\n\n  private moveSpeed: number = 100;\n\n  private springVelocity: number = 320;\n\n  start() {\n    this.anim = this.getComponent(cc.Animation);\n\n    if (this.node.name == \"Conveyor\") {\n      this.node.scaleX = Math.random() >= 0.5 ? 1 : -1;\n      this.moveSpeed *= this.node.scaleX;\n    }\n  }\n\n  reset() {\n    this.isTouched = false;\n  }\n\n  update(dt) {\n    if (\n      this.node.y - this.highestPos >= 0 &&\n      this.node.y - this.highestPos < 100\n    )\n      this.getComponent(cc.PhysicsBoxCollider).enabled = false;\n    else this.getComponent(cc.PhysicsBoxCollider).enabled = true;\n  }\n\n  playAnim() {\n    if (this.anim) this.animState = this.anim.play();\n  }\n\n  getAnimState() {\n    if (this.animState) return this.animState;\n  }\n\n  platformDestroy() {\n    cc.log(this.node.name + \" Platform destory.\");\n    this.node.destroy();\n  }\n\n  // ===================== TODO =====================\n  // 1. In the physics lecture, we know that Cocos Creator\n  //    provides four contact callbacks. You need to use callbacks to\n  //    design different behaviors for different platforms.\n  //\n  //    Hints: The callbacks are \"onBeginContact\", \"onEndContact\", \"onPreSolve\", \"onPostSolve\".\n  //\n  // 2. There are five different types of platforms: \"Normal\", \"Fake\", \"Nails\", \"Trampoline\", \"Conveyor\".\n  //    When player touches the platform, you need to play the corresponding\n  //    sound effect for each platform. (The audioClip named \"soundEffect\")\n  //    Note that the sound effect only plays on the first time the player touches the platform.\n  //\n  // 3. \"Trampoline\" and \"Fake\" need to play animation when the player touches them.\n  //    TAs have finished the animation functions, \"playAnim\" & \"getAnimState\", for you.\n  //    You can directly call \"playAnim\" to play animation, and call \"getAnimState\" to get the current animation state.\n  //    You have to play animations at the proper timing.\n  //\n  // 4. For \"Trampoline\", you have to do \"spring effect\" whenever the player touches it\n  //\n  //    Hints: Change \"linearVelocity\" of the player's rigidbody to make him jump.\n  //    The jump value is \"springVelocity\".\n  //\n  // 5. For \"Conveyor\", you have to do \"delivery effect\" when player is in contact with it.\n  //\n  //    Hints: Change \"linearVelocity\" of the player's rigidbody to make him move.\n  //    The move value is \"moveSpeed\".\n  //\n  // 6. For \"Fake\", you need to make the player fall 0.2 seconds after he touches the platform.\n  //\n  // 7. All the platforms have only \"upside\" collision. You have to prevent the collisions from the other directions.\n  //\n  //    Hints: You can use \"contact.getWorldManifold().normal\" to judge collision direction.\n  //\n  //\n  // 8. When player touches \"Nails\" platform, you need to call the function \"playerDamage\" in \"Player.ts\" to update player health,\n  //    or call the function \"playerRecover\" in \"Player.ts\" when player touches other platforms.\n  //\n  // 9. When platforms touch the node named \"upperBound\", you need to call the function \"platformDestroy\" to destroy the platform.\n  // ================================================\n}\n"]}